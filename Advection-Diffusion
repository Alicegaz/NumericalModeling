{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "\n",
    "import numpy as np\n",
    "import cv2\n",
    "import sys\n",
    "\n",
    "from matplotlib.pyplot import imshow\n",
    "\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "recs = [(68, 11, 98, 29),\n",
    "(68, 29, 86, 89),\n",
    "(68, 110 , 86, 128),\n",
    "(68, 164 , 98, 182),\n",
    "(68, 182 , 86, 242),\n",
    "(68, 263 , 86, 281),\n",
    "(137 , 11, 155 , 29),\n",
    "(137 , 50, 155, 128),\n",
    "(125, 110, 137, 128),\n",
    "(137, 164, 155, 182),\n",
    "(137, 203, 155, 281),\n",
    "(125, 263, 137, 281),\n",
    "(191 , 11, 221 , 29),\n",
    "(191 , 29, 209 , 89),\n",
    "(191, 110, 209, 128),\n",
    "(191, 164, 221, 182),\n",
    "(191, 182, 209, 242),\n",
    "(191, 263, 209, 281),\n",
    "(260 , 11, 278 , 29),\n",
    "(260 , 50, 278, 128),\n",
    "(248, 110, 272, 128),\n",
    "(260, 164, 278, 182),\n",
    "(260, 203, 278, 281),\n",
    "(248, 263, 260, 281)]\n",
    "recs = list(map(lambda x: list(map(lambda y: y - 1, x)), recs))\n",
    "\n",
    "recs = np.array(recs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_inno_map(recs, M):\n",
    "    '''\n",
    "    Building the resized map of innopolis region of size 300x300 m.\n",
    "    Input:\n",
    "        recs - [(x1_1, y1_1, x2_1, y2_1), ..., (x1_n, y1_n, x2_n, y2_n)] array of building coordinates as tuples\n",
    "        M - the size of the grid to construct\n",
    "    Output:\n",
    "        img - the array of shape (M, M) buildings are 0 and free area are 1\n",
    "    '''\n",
    "    img = np.ones((300, 300), np.uint8)\n",
    "    for rect in recs:\n",
    "        cv2.rectangle(img, (rect[0], 300 - rect[1]), (rect[2], 300 - rect[3]), (0,), -1)\n",
    "\n",
    "    img = cv2.resize(img, (M, M), cv2.INTER_NEAREST)\n",
    "\n",
    "    return img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def FindPoint(x, y):\n",
    "    '''\n",
    "    check whether the point corresponds to the point inside the building\n",
    "    '''\n",
    "    for rec in recs:\n",
    "        x1, y1, x2, y2 = rec\n",
    "        if (x > x1 and x < x2 and\n",
    "                    y > y1 and y < y2):\n",
    "            return True\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_border(x, y):\n",
    "    '''\n",
    "    check whether the point corresponds to the border of the building\n",
    "    '''\n",
    "    for rec in recs:\n",
    "        x1, y1, x2, y2 = rec\n",
    "        if (((x > x1) and (x < x2)) and ((y1 == y) or (y2 == y))) \\\n",
    "                or (((y > y1) and (y < y2)) and ((x1 == x) or (x2 == x))):\n",
    "            return True\n",
    "        else:\n",
    "            return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def coef_in_range(lamda, k, h):\n",
    "    return (abs(lamda) / k) <= (2 / h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def converged(X, eps):\n",
    "    '''\n",
    "    convergence condition of the iteration method\n",
    "    '''\n",
    "    X = np.array(X)\n",
    "    if X.shape[0] < 2:\n",
    "        return False\n",
    "    diff1 = (X[-1] - X[-2])\n",
    "    conv = np.sum(np.abs(diff1)) <= eps\n",
    "    return conv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def iteration(A, B, eps=1e-5, max_iter=100, tao=None):\n",
    "    '''\n",
    "    Fixed-point iteration method to solve Advection-diffusion equation\n",
    "    '''\n",
    "    M = int(math.sqrt(A.shape[0]))\n",
    "    Z = np.diag((np.reciprocal(np.diag(A) + 1e-5)))\n",
    "    if tao=='optim1':\n",
    "        lambda_min = 0\n",
    "        lambda_max = 7.995645745273593\n",
    "        tao = 2 / (lambda_min + lambda_max)\n",
    "    elif tao=='optim2':\n",
    "        tao = 1/(4*0.5*M**2)\n",
    "    if tao is not None:\n",
    "        toa = tao\n",
    "    else:\n",
    "        tao = ((1/(4*0.5*(M**2))))*100\n",
    "        tao = 0.04\n",
    "    print(\"Tao: \", tao)\n",
    "    X = [np.matmul(Z, B)]\n",
    "    it = 0\n",
    "    while not converged(X, eps):\n",
    "        X_new = X[-1] - tao * (np.matmul(A, X[-1]) - B)\n",
    "        X.append(X_new)\n",
    "        if it == max_iter:\n",
    "            return X[-1]\n",
    "        it+=1\n",
    "    return X[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_matrix(inno_map, lamda1=1, lamda2=0, k=0.5, step_size=1):\n",
    "    '''\n",
    "    Building the matrix for advection diffusion equation for the innopolis map.\n",
    "    A:\n",
    "    Матрица A инициализируется 0. Далее следует проверка, лежит ли каждая из точек в пределах зданий, \n",
    "    если входит то оставляем строчку соответсвующую данной точке обнуленной. Иначе переходим к следующим проверкам.\n",
    "    Узлы сетки интерполируются соседними при условии что они (соседи) не являются границами \n",
    "    и не лежат на зданиях, в противном случае, если соседи интерполиремых значений являются \n",
    "    границами или лежат на здании, то в строчке соответствующей интерполируюему значению эти \n",
    "    соседи обозначаются нулями.\n",
    "    B:\n",
    "    Создаем карту города на основе координат зданий. Описание карты в спецификации метода 'build_inno_map'. \n",
    "    Карта задает граничные условия для всей сетки, кроме границ u(x, 0), u(x, 1), u(0, y), u(1, y). \n",
    "    Границы u(x, 0), u(x, 1), u(0, y), u(1, y) обозначаются в следующем условии.\n",
    "    \n",
    "    '''\n",
    "    M = inno_map.shape[0]\n",
    "    print(f'M: {M}')\n",
    "    u = np.zeros((M ** 2, M ** 2))\n",
    "    b = np.zeros(M ** 2)\n",
    "    coords = []\n",
    "    for i, y in enumerate(np.arange(0, M, step_size)):\n",
    "        for j, x in enumerate(np.arange(0, M, step_size)):\n",
    "            coords.append((x, y))\n",
    "            A = np.zeros((M, M), dtype=np.float32)\n",
    "            if not FindPoint(y, x):\n",
    "                A[i, j] = 4\n",
    "                h = 1/M\n",
    "                r1 = (lamda1 * h) / (2 * k)\n",
    "                r2 = (lamda2 * h) / (2 * k)\n",
    "                # we do not approximate by the border points\n",
    "                if not FindPoint(x, y - step_size) and \\\n",
    "                        not is_border(x, y - step_size) and y > 0:\n",
    "                    A[i, j - 1] = -1 * (1 + r2)\n",
    "                if not FindPoint(x, y - step_size) and \\\n",
    "                        not is_border(x, y - step_size) and y < M - 1 and j!=M-1:\n",
    "                    A[i, j + 1] = -1 * (1 - r2)\n",
    "                if not FindPoint(x - step_size, y) and \\\n",
    "                        not is_border(x - step_size, y) and x > 0:\n",
    "                    A[i - 1, j] = -1 * (1 + r1)\n",
    "                if not FindPoint(x + step_size, y) and \\\n",
    "                        not is_border(x + step_size, y) and x < M - 1 and i!=M-1:\n",
    "                    A[i + 1, j] = -1 * (1 - r1)\n",
    "\n",
    "                u_line = A.ravel()  # M^2\n",
    "                u[M * i + j, :] = u_line\n",
    "\n",
    "                b[M * i + j] += inno_map[x, y]\n",
    "                if x == 0:\n",
    "                    b[M * i + j] += 1\n",
    "                if (x == M - 1) or (y == 0) or (y == M - 1):\n",
    "                    b[M * i + j] = 0\n",
    "    return u, b, coords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('input.txt', 'r')\n",
    "f2 = open('output.txt', 'w')\n",
    "f1 = f.readlines()\n",
    "str1 = list(map(float, f1[0].split(' ')))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Задаем параметры для построения матрицы A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "eps = 1e-5\n",
    "M = 100\n",
    "lamda1 = 1\n",
    "lamda2 = 0\n",
    "k = 0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Строим карту Иннополиса"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "inno_map = build_inno_map(recs, M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0c12cd6198>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(inno_map)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Строим матрицу A и вектор B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M: 100\n"
     ]
    }
   ],
   "source": [
    "A, B, coords = build_matrix(inno_map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 10000)\n",
      "(10000,)\n",
      "[[ 4. -1.  0. ...  0.  0.  0.]\n",
      " [ 0.  4. -1. ...  0.  0.  0.]\n",
      " [ 0.  0.  4. ...  0.  0.  0.]\n",
      " ...\n",
      " [ 0.  0.  0. ...  0.  0.  0.]\n",
      " [ 0.  0.  0. ...  0.  0.  0.]\n",
      " [ 0.  0.  0. ...  0.  0.  0.]]\n",
      "\n",
      "\n",
      "[0. 0. 0. ... 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(A.shape)\n",
    "print(B.shape)\n",
    "print(A)\n",
    "print(\"\\n\")\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. отправляем матрицу A и вектор B в метод итераций"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tao подобранный"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tao:  0.04\n"
     ]
    }
   ],
   "source": [
    "x = iteration(A, B, eps=1e-2, max_iter=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0c448e3fd0>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(x.reshape((M, M)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tao:  0.005\n"
     ]
    }
   ],
   "source": [
    "x = iteration(A, B, eps=1e-2, max_iter=1000, tao=0.005)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0c448baac8>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(x.reshape((M, M)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tao:  0.001\n"
     ]
    }
   ],
   "source": [
    "x = iteration(A, B, eps=1e-2, max_iter=1000, tao=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0c447e7fd0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(x.reshape((M, M)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "оптимальный по формуле из домашнего задания"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tao:  5e-05\n"
     ]
    }
   ],
   "source": [
    "x = iteration(A, B, eps=1e-2, max_iter=1000, tao='optim2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0c44742390>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(x.reshape((M, M)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tao оптимальный вычесленный по вормуле 2/(L+l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tao:  0.25013614456121264\n"
     ]
    }
   ],
   "source": [
    "x = iteration(A, B, eps=1e-2, max_iter=1000, tao='optim1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0c44813cc0>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(x.reshape((M, M)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f2.write(str(M)+\" \")\n",
    "it = 0\n",
    "for c, u in zip(coords, x):\n",
    "    f2.write(str(c[0]) + \" \" + str(c[1]) + \" \" + str(u)+\" \")\n",
    "    if ((it % 4*M) == 0) and (it > 0):\n",
    "        f2.write(\"\\n\")\n",
    "    it += 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
